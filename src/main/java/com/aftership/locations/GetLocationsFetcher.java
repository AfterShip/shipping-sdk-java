/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
package com.aftership.locations;

import com.aftership.base.Fetcher;
import com.aftership.constant.ErrorEnum;
import com.aftership.exception.ApiException;
import com.aftership.http.*;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.util.HashMap;
import java.util.Map;
import com.aftership.http.Request;
import com.aftership.model.GetLocationsResponse;
import com.aftership.model.GetLocationsResponseData;

public class GetLocationsFetcher extends Fetcher<GetLocationsResponse> {
    private final Map<String, String> headerParams= new HashMap<>(8);

    public GetLocationsFetcher addHeaderParam(final String name, final String value) {
        if (value == null || value.equals("null")) {
            return this;
        }

        if (!headerParams.containsKey(name)) {
            headerParams.put(name, value);
        }
        return this;
    }

    private void setHeaderParams(final Request request) {
        for (final Map.Entry<String, String> entry : headerParams.entrySet()) {
            request.addHeaderParam(entry.getKey(), entry.getValue());
        }
    }
     private String slug;

     private String street;

     private String postalCode;

     private String city;

     private String state;

     private String country;

     private Integer count;

     private String distance;

     private String distanceUnit;

     private Object filters;


    public GetLocationsFetcher setSlug(String slug) {
        this.slug = slug;
        return this;
    }

    public GetLocationsFetcher setStreet(String street) {
        this.street = street;
        return this;
    }

    public GetLocationsFetcher setPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }

    public GetLocationsFetcher setCity(String city) {
        this.city = city;
        return this;
    }

    public GetLocationsFetcher setState(String state) {
        this.state = state;
        return this;
    }

    public GetLocationsFetcher setCountry(String country) {
        this.country = country;
        return this;
    }

    public GetLocationsFetcher setCount(Integer count) {
        this.count = count;
        return this;
    }

    public GetLocationsFetcher setDistance(String distance) {
        this.distance = distance;
        return this;
    }

    public GetLocationsFetcher setDistanceUnit(String distanceUnit) {
        this.distanceUnit = distanceUnit;
        return this;
    }

    public GetLocationsFetcher setFilters(Object filters) {
        this.filters = filters;
        return this;
    }

    @Override
    public GetLocationsResponse fetch(AfterShipClient client) throws Exception {
        String path = "/postmen/v3/locations";
        Request request = new Request(HttpMethod.GET, path);
        addQueryParams(request);
        setHeaderParams(request);
        Response response = client.request(request);
        AfterShipResponse<GetLocationsResponseData> responseData = new Gson().fromJson(response.getContent(), new TypeToken<AfterShipResponse<GetLocationsResponseData>>() {
            }.getType());
        if (responseData.getMeta() != null && responseData.getMeta().getCode() > 299) {
            throw new ApiException(
                    responseData.getMeta().getCode(),
                    responseData.getMeta().getMessage(),
                    ErrorEnum.getCode(response.getStatusCode(), responseData.getMeta().getCode()),
                    response.getStatusCode(),
                    response.getContent(),
                    response.getHeaders()
            );
        }
        GetLocationsResponse result = new GetLocationsResponse();
        result.setData(responseData.getData());
        result.setResponseHeader(response.getResponseHeader());
        return result;
    }

    private void addQueryParams(final Request request) {
        if (slug != null) {
            request.addQueryParam("slug", slug);
        }
        if (street != null) {
            request.addQueryParam("street", street);
        }
        if (postalCode != null) {
            request.addQueryParam("postal_code", postalCode);
        }
        if (city != null) {
            request.addQueryParam("city", city);
        }
        if (state != null) {
            request.addQueryParam("state", state);
        }
        if (country != null) {
            request.addQueryParam("country", country);
        }
        if (count != null && count > 0) {
            request.addQueryParam("count", String.valueOf(count));
        }
        if (distance != null) {
            request.addQueryParam("distance", distance);
        }
        if (distanceUnit != null) {
            request.addQueryParam("distance_unit", distanceUnit);
        }
        if (filters != null) {
            request.addQueryParam("filters", String.valueOf(filters));
        }
    }
}
