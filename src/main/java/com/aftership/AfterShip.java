/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
package com.aftership;

import com.aftership.auth.AuthType;
import com.aftership.constant.ErrorEnum;
import com.aftership.exception.ApiException;
import com.aftership.http.AfterShipClient;

public class AfterShip {
    private static final String DEFAULT_DOMAIN = "https://sandbox-api.aftership.com";
	private static final int DEFAULT_TIMEOUT = 10000;
    private static final int DEFAULT_MAX_RETRY = 2;
    private static AfterShipClient client;

    private static String apiKey = System.getenv("AFTERSHIP_SHIPPING_SDK_API_KEY");
    private static String apiSecret = System.getenv("AFTERSHIP_SHIPPING_SDK_API_SECRET");
    private static AuthType authType;

    private static String domain = System.getenv("AFTERSHIP_SHIPPING_SDK_DOMAIN");
    private static Integer maxRetry;
    private static Integer timeout;
    private static String userAgent = System.getenv("AFTERSHIP_SHIPPING_SDK_USER_AGENT");
    private static String proxy = System.getenv("AFTERSHIP_SHIPPING_SDK_PROXY");

    private AfterShip() {
    }

    public static synchronized void init(final String apiKey) {
        AfterShip.apiKey = apiKey;
    }

    public static synchronized void init(final String apiKey, final String apiSecret, AuthType authType) {
        AfterShip.apiKey = apiKey;
        AfterShip.apiSecret = apiSecret;
        AfterShip.authType = authType;
    }

    private static void getAuthType() {
        if (authType != null) {
            return;
        }
        String auth = System.getenv("AFTERSHIP_SHIPPING_SDK_AUTHENTICATION_TYPE");
        if (auth != null && !auth.isEmpty()) {
            auth = auth.toUpperCase();
            if (auth.equals(AuthType.AES.name())) {
                authType = AuthType.AES;
                return;
            }
            if (auth.equals(AuthType.RSA.name())) {
                authType = AuthType.RSA;
                return;
            }
        }
        authType = AuthType.APIKEY;
    }

    private static Integer getIntegerFromEnv(String envName, Integer defaultValue) {
        String envValue = System.getenv(envName);
        if (envValue == null) {
            return defaultValue;
        }
        if (envValue.isEmpty()) {
            return defaultValue;
        }
        try {
            return Integer.parseInt(envValue);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    public static AfterShipClient getRestClient() throws Exception {
        if (client == null) {
            client = buildRestClient();
        }
        return client;
    }

    private static AfterShipClient buildRestClient() throws Exception {
        getAuthType();
        if (apiKey == null || apiKey.isEmpty()) {
            throw new ApiException(ErrorEnum.INVALID_API_KEY.name(), "Invalid option `apiKey`");
        }
        if (AuthType.AES.equals(authType) || AuthType.RSA.equals(authType)) {
            if (apiSecret == null || apiSecret.isEmpty()) {
                throw new ApiException(ErrorEnum.INVALID_API_KEY.name(), "Invalid option `apiSecret`");
            }
        }
        if (timeout == null) {
            Integer envTimeout = getIntegerFromEnv("AFTERSHIP_SHIPPING_SDK_TIMEOUT", DEFAULT_TIMEOUT);
            setTimeout(envTimeout);
        }
        if (maxRetry == null) {
            Integer envMaxRetry = getIntegerFromEnv("AFTERSHIP_SHIPPING_SDK_MAX_RETRY", DEFAULT_MAX_RETRY);
            setMaxRetry(envMaxRetry);
        }
        AfterShipClient.Builder builder = new AfterShipClient.Builder(apiKey, apiSecret, authType);
        if (domain != null && !domain.isEmpty()) {
            builder.setDomain(domain);
        } else {
            builder.setDomain(DEFAULT_DOMAIN);
        }
        if (userAgent != null && !userAgent.isEmpty()) {
            builder.setUserAgent(userAgent);
        }
        if (proxy != null && !proxy.isEmpty()) {
            builder.setProxy(proxy);
        }
        return builder.setTimeout(timeout)
            .setMaxRetry(maxRetry)
            .build();
    }

    public static void setDomain(final String domain) throws Exception {
        if (domain == null || domain.isEmpty()) {
            throw new ApiException(ErrorEnum.INVALID_OPTION.name(), "Invalid option `domain`");
        }
        AfterShip.domain = domain;
    }

    public static void setMaxRetry(final int maxRetry) throws Exception {
        if (maxRetry < 0 || maxRetry > 10) {
            throw new ApiException(ErrorEnum.INVALID_OPTION.name(), "Invalid option `maxRetry`");
        }
        AfterShip.maxRetry = maxRetry;
    }

    public static void setTimeout(final int timeout) throws Exception {
        if (timeout < 0) {
            throw new ApiException(ErrorEnum.INVALID_OPTION.name(), "Invalid option `timeout`");
        }
        AfterShip.timeout = timeout;
    }

    public static void setUserAgent(final String userAgent) {
        AfterShip.userAgent = userAgent;
    }

    public static void setProxy(final String proxy) {
        AfterShip.proxy = proxy;
    }
}
